// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff/modules (interfaces: Consensus)
//
// Generated by this command:
//
//	mockgen -destination=../internal/mocks/consensus_mock.go -package=mocks . Consensus
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	hotstuff "github.com/relab/hotstuff"
	gomock "go.uber.org/mock/gomock"
)

// MockConsensus is a mock of Consensus interface.
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
	isgomock struct{}
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus.
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance.
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// ChainLength mocks base method.
func (m *MockConsensus) ChainLength() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// ChainLength indicates an expected call of ChainLength.
func (mr *MockConsensusMockRecorder) ChainLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainLength", reflect.TypeOf((*MockConsensus)(nil).ChainLength))
}

// CommittedBlock mocks base method.
func (m *MockConsensus) CommittedBlock() *hotstuff.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedBlock")
	ret0, _ := ret[0].(*hotstuff.Block)
	return ret0
}

// CommittedBlock indicates an expected call of CommittedBlock.
func (mr *MockConsensusMockRecorder) CommittedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedBlock", reflect.TypeOf((*MockConsensus)(nil).CommittedBlock))
}

// Propose mocks base method.
func (m *MockConsensus) Propose(cert hotstuff.SyncInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Propose", cert)
}

// Propose indicates an expected call of Propose.
func (mr *MockConsensusMockRecorder) Propose(cert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockConsensus)(nil).Propose), cert)
}

// StopVoting mocks base method.
func (m *MockConsensus) StopVoting(view hotstuff.View) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopVoting", view)
}

// StopVoting indicates an expected call of StopVoting.
func (mr *MockConsensusMockRecorder) StopVoting(view any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVoting", reflect.TypeOf((*MockConsensus)(nil).StopVoting), view)
}
